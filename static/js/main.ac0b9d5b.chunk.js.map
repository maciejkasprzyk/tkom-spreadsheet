{"version":3,"sources":["utils.js","components/Spreadsheet.module.scss","components/Editor.module.scss","components/App.js","components/Spreadsheet.js","parser/indentedLexer.js","components/App.module.scss","components/Editor.js","nodes/BaseNode.js","nodes/BinaryOperationNode.js","nodes/AdditionNode.js","nodes/SubtractionNode.js","nodes/MultiplicationNode.js","nodes/DivisionNode.js","nodes/FinalNode.js","nodes/NumberNode.js","nodes/NegativeNode.js","nodes/UnaryOperator.js","nodes/FunctionIdentifierNode.js","nodes/FunctionCallNode.js","nodes/VariableNode.js","nodes/RangeNode.js","nodes/CellNode.js","nodes/DynamicCellNode.js","nodes/AssignmentNode.js","nodes/WhileNode.js","nodes/IfElseNode.js","nodes/ListNode.js","nodes/EqualNode.js","nodes/GreaterEqualNode.js","nodes/LessEqualNode.js","nodes/LessNode.js","nodes/GreaterNode.js","nodes/NotEqualNode.js","nodes/FunctionDefNode.js","nodes/ReferenceNode.js","parser/parserPostProcessors.js","parser/lexer.js","parser/grammar.js","parser/formulaGrammar.js","parser/parsers.js","environment/Variable.js","environment/Cell.js","environment/Environment.js","mobx/SpreadsheetStore.js","serviceWorker.js","index.js","parser/errors.js"],"names":["letterLabelGenerator","nextChar","c","String","fromCharCode","charCodeAt","label","slice","reverse","join","index","length","push","topologicalSort","startVariable","visited","sorted","dfs","variable","includes","UserError","observers","neighbour","isFormula","x","charAt","module","exports","store","SpreadsheetStore","App","useEffect","populateSheet","className","style","env","y","cells","onCellSet","v","examples","onSubmit","code","run","onLogLexerOutput","logLexerOutput","onLogParseTree","logParseTree","r","eval","observer","props","initial","useState","editing","_setEditing","cell","useEditing","isEditing","setEditing","onInputKeyDown","e","keyCode","target","blur","rowLabelsGen","Spreadsheet","Array","fill","map","_","i","key","next","value","row","j","backgroundColor","background","onClick","onKeyDown","onFocus","formula","parentNode","classList","add","focus","onBlur","remove","autoFocus","error","IndentedLexer","lexer","ws","end","this","startsWith","str","prefix","lastIndexOf","unicodeDebugString","s","u","n","hex16","d","offset","prototype","ignoreWhiteSpaceNext","require","message","tok","indentedNext","type","tokens","generateMoreTokens","shift","token","changeIndent","afterNewLine","col","line","indent","indents","prev","text","lineBreaks","Error","pop","save","reset","data","info","formatError","has","name","window","Editor","setCodeState","setCode","Top","example","mode","theme","onChange","height","width","Bottom","defaultProps","BaseNode","constructor","BinaryOperationNode","left","right","findCellsReferenced","concat","unParse","symbol","AdditionNode","exec","SubtractionNode","MultiplicationNode","DivisionNode","FinalNode","linebreaks","NumberNode","toString","NegativeNode","operand","FunctionIdentifierNode","FunctionCallNode","identifierToken","args","identifier","getFunctionAst","VariableNode","getVarByName","RangeNode","startCell","endCell","cell1","cell2","getCellsByRange","CellNode","getCell","DynamicCellNode","AssignmentNode","setVariable","ast","cloneDeep","wrapper","replaceVariablesWithConstants","property","hasOwnProperty","varValue","setCell","WhileNode","condition","block","ifElseNode","elseBlock","ListNode","list","EqualNode","environ","GreaterEqualNode","LessEqualNode","LessNode","GreaterNode","NotEqualNode","FunctionDefNode","ReferenceNode","referenced","addition","a","b","subtraction","multiplication","division","number","negative","functionCall","equal","greaterEqual","lessEqual","less","greater","notEqual","range","first","result","el","assigment","emptyList","dynamicCell","reference","match","cellIdentifier","divideIntoLettersAndNumber","letters","digits","y_index","parseInt","x_index","getCellIndexes","moo","ampersand","dot","lparen","rparen","lsquare","rsquare","plus","asterisk","slash","minus","semicolon","colon","assign","string","parseFloat","id","Lexer","ParserRules","p","kwIf","kwWhile","expr","kwDef","kwElse","dedent","ParserStart","Parser","parser","nearley","fromCompiled","grammar","feed","results","FormulaParser","formulaGrammar","Variable","Cell","subjects","_unregisterObserver","indexOf","observable","Environment","funcitons","gen","variablesScopes","unregisterFromAllSubjects","_setCellFormula","_setCellValue","updateObservers","substring","varsReferenced","observe","isNaN","start","x1","y1","x2","y2","variables","console","log","undefined","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","params","captureStackTrace"],"mappings":"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","file":"static/js/main.ac0b9d5b.chunk.js","sourcesContent":["import {UserError} from \"./parser/errors\";\n\n/**\n * It returns strings like this: \"A\", \"B\", ... , \"Z\", \"AA\", \"AB\", ...\n */\nexport function* letterLabelGenerator() {\n  function nextChar(c) {\n    return String.fromCharCode(c.charCodeAt(0) + 1);\n  }\n\n  const label = ['A'];\n  while (true) {\n    yield label.slice().reverse().join(\"\");\n    let index = 0;\n    label[index] = nextChar(label[index]);\n    while (label[index].charCodeAt(0) > 'Z'.charCodeAt(0)) {\n      label[index] = 'A';\n      index++;\n      if (index >= label.length) {\n        label.push('A');\n        break;\n      }\n      label[index] = nextChar(label[index]);\n    }\n  }\n}\n\n\nexport function topologicalSort(startVariable) {\n  let visited = [];\n  let sorted = [];\n  dfs(startVariable);\n\n  function dfs(variable) {\n    if (sorted.includes(variable)) {\n      return;\n    }\n    if (visited.includes(variable)) {\n      throw new UserError(\"Cycle\");\n    }\n    visited.push(variable);\n    for (const neighbour of variable.observers) {\n      dfs(neighbour)\n    }\n    sorted.push(variable);\n  }\n\n  return sorted.reverse().slice(1);\n}\n\nexport function isFormula(x) {\n  return x.charAt(0) === '=';\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spreadsheet\":\"Spreadsheet_Spreadsheet__2MlAU\",\"focus\":\"Spreadsheet_focus__2PRei\",\"error\":\"Spreadsheet_error__2OBGk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Editor\":\"Editor_Editor__3K0No\",\"Top\":\"Editor_Top__3e9Hb\",\"Bottom\":\"Editor_Bottom__MdgSJ\"};","/* eslint-disable no-eval */\nimport React, {useEffect} from 'react';\nimport Spreadsheet from \"./Spreadsheet\";\nimport {SpreadsheetStore} from \"../mobx/SpreadsheetStore\";\nimport style from './App.module.scss';\nimport Editor from \"./Editor\";\n\nconst store = new SpreadsheetStore(5, 100);\n\n\n\n\nfunction App() {\n\n  useEffect(populateSheet, []);\n\n  return (\n    <div className={style.App}>\n      <Spreadsheet\n        x={store.env.x}\n        y={store.env.y}\n        cells={store.env.cells}\n        onCellSet={(x,y,v) => store.onCellSet(x,y,v)}\n      />\n      <Editor\n        examples={examples}\n        onSubmit={(code) => store.run(code)}\n        onLogLexerOutput={(code) => store.logLexerOutput(code)}\n        onLogParseTree={(code) => store.logParseTree(code)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\nconst examples = [\n  `i = 0\nwhile i < 5\n    [0;i] = i\n    i = i + 1`,\n\n`A1 = 1\ni = 5\nwhile i > 0\n    i = i - 1\n    a = A1\n    A1 = a + 1`,\n\n`if A1 == 5\n    A2 = 5\nelse\n    A2 = 10  \n`,\n`A1.background = \"#52A\"`,\n`x = 5\nA2 = 3\nA1 = x + 10 + A2\n`\n\n\n];\n\n\nfunction populateSheet() {\n\n  // cells\\[(.*)\\]\\[(.*)\\].set\\((.*)\\);\n  // store.onCellSet($2,$1,$3);\n\n  let r = 0;\n\n  store.onCellSet(0, r, \"Self reference\");\n\n\n  store.onCellSet(0,r,\"Self reference\");\n  store.onCellSet(1,r,\"=B1\");\n\n  store.onCellSet(0,++r,\"Cycle\");\n  store.onCellSet(1,r,\"=C2\");\n  store.onCellSet(2,r,\"=B2\");\n\n  store.onCellSet(0,++r,\"Auto update working\");\n  store.onCellSet(2,r,\"=B3\");\n  store.onCellSet(3,r,\"=B3+C3\");\n  store.onCellSet(1,r,\"coś\");\n\n  store.onCellSet(0,++r,\"Simple math\");\n  let x = \"1+2*(5+5)+2/3+((1*3))/2\";\n  store.onCellSet(1,r,\"=\" + x);\n  store.onCellSet(2,r,`is ${eval(x)}`);\n\n  store.onCellSet(0,++r,\"Complex math\");\n  x = \"1-1+2*(5+5)+2/3+((1*3))/2\";\n  store.onCellSet(1,r,\"=\" + x);\n  store.onCellSet(2,r,`is ${eval(x)}`);\n\n  store.onCellSet(0,++r,\"Negative numbers\");\n  x = \"1-1+1\";\n  store.onCellSet(1,r,\"=\" + x);\n  store.onCellSet(2,r,`is ${eval(x)}`);\n\n  store.onCellSet(0,++r,\"Math with labels\");\n  store.onCellSet(1,r,'=C7+D7*E7');\n  store.onCellSet(2,r,'2');\n  store.onCellSet(3,r,'2');\n  store.onCellSet(4,r,'2');\n\n  store.onCellSet(0,++r,\"Invalid formulas\");\n  store.onCellSet(1,r,'=C7D7*E7');\n  store.onCellSet(2,r,'=as325');\n  store.onCellSet(3,r,'=1**2');\n\n  store.onCellSet(0,++r,\"* and / order\");\n  x = \"3/3*3\";\n  store.onCellSet(1,r,\"=\" + x);\n  store.onCellSet(2,r,`is ${eval(x)}`);\n\n  store.onCellSet(0,++r,\"- at the begging and --\");\n  x = \"-1+2\";\n  store.onCellSet(1,r,\"=\" + x);\n  store.onCellSet(2,r,`is ${eval(x)}`);\n\n  store.onCellSet(0,++r,\"function call\");\n  store.onCellSet(1,r,\"=sum(C11;D11;E11)\");\n  store.onCellSet(2,r,\"1\");\n  store.onCellSet(3,r,\"2\");\n  store.onCellSet(4,r,\"3\");\n\n  store.onCellSet(0,++r,\"function with range\");\n  store.onCellSet(1,r,\"=sum(C11:E12)\");\n  store.onCellSet(2,r,\"1\");\n  store.onCellSet(3,r,\"2\");\n  store.onCellSet(4,r,\"3\");\n\n  store.onCellSet(0,++r,\"Not existing function\");\n  store.onCellSet(1,r,\"=foo(C11:E12)\");\n\n  store.onCellSet(0,++r,\"If\");\n  store.onCellSet(1,r,\"=if(C14<D14;1;0)\");\n  store.onCellSet(2,r,\"5\");\n  store.onCellSet(3,r,\"6\");\n\n\n}\n","import React, {useState} from 'react';\nimport {observer} from \"mobx-react\";\nimport style from './Spreadsheet.module.scss'\nimport PropTypes from 'prop-types'\nimport {letterLabelGenerator} from \"../utils\";\n\n\n\nconst Spreadsheet = props => {\n\n  let [isEditing, setEditing] = useEditing();\n\n\n  const onInputKeyDown = (e) => {\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n  };\n\n  const onBlur = (e, cell) => {\n    props.onCellSet(cell.x, cell.y, e.target.value);\n    e.target.parentNode.classList.remove(style.focus);\n    if (isEditing(cell)){\n      setEditing(null);\n    }\n  };\n\n  const onFocus = (e, cell) => {\n    e.target.value = cell.formula ? cell.formula : cell.value;\n    e.target.parentNode.classList.add(style.focus)\n  };\n\n  const onClick = (e, cell) => {\n    setEditing(cell);\n  };\n\n  const rowLabelsGen = letterLabelGenerator();\n\n  return (\n    <div className={style.Spreadsheet}>\n      <table>\n        <thead>\n        <tr>\n          <th/>\n          {Array(props.x).fill(0).map((_, i) =>\n            <th key={i}>\n              {rowLabelsGen.next().value}\n            </th>\n          )}\n        </tr>\n        </thead>\n        <tbody>\n        {props.cells.map((row, i) =>\n          <tr key={i}>\n            <th>{i + 1}</th>\n            {row.map((cell, j) =>\n              <td\n                style={{backgroundColor: cell.background}}\n                onClick={e => onClick(e, cell)}\n                key={j}>\n                {isEditing(cell) ?\n                  <input\n                    onKeyDown={onInputKeyDown}\n                    onFocus={e => onFocus(e, cell)}\n                    onBlur={e => onBlur(e, cell)}\n                    autoFocus={true}\n                  /> :\n                  <div\n                    className={cell.error ? style.error : \"\"}\n                  >\n                    {cell.error ? cell.error : cell.value}\n                  </div>\n                }\n              </td>\n            )}\n          </tr>\n        )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nfunction useEditing(initial) {\n\n  let [editing, _setEditing] = useState(initial);\n\n  const setEditing = (cell) => {\n    if (cell == null) {\n      _setEditing(null)\n    }\n    else {\n      _setEditing({x: cell.x, y: cell.y})\n    }\n  };\n\n  const isEditing = (cell) => {\n    return editing && editing.x === cell.x && editing.y === cell.y;\n  };\n\n  return [isEditing, setEditing];\n}\n\n\nSpreadsheet.propTypes = {\n  cells: PropTypes.arrayOf(PropTypes.array).isRequired,\n  onCellSet: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n};\n\nexport default observer(Spreadsheet);\n","(function () {\n\n  function IndentedLexer(lexer, ws, end) {\n    this.lexer = lexer;\n    this.ws = ws; // white space token\n    this.end = end; // new line token\n  }\n\n  IndentedLexer.prototype.next = function () {\n    try {\n      return this.ignoreWhiteSpaceNext();\n    } catch (e) {\n      const errors = require('./errors')\n      throw new errors.UserError(e.message);\n    }\n  }\n\n  IndentedLexer.prototype.ignoreWhiteSpaceNext = function () {\n    let tok;\n    while ((tok = this.indentedNext()) && tok.type === this.ws) {\n    }\n    return tok;\n  }\n\n  IndentedLexer.prototype.indentedNext = function () {\n    while (this.tokens.length === 0) {\n      this.generateMoreTokens();\n    }\n    return this.tokens.shift()\n  }\n\n  IndentedLexer.prototype.generateMoreTokens = function () {\n    let token = this.lexer.next(this);\n    if (!token) {\n      this.changeIndent(\"\");\n      this.tokens.push(token);\n      return;\n    }\n\n    if (this.afterNewLine) {\n      this.afterNewLine = false;\n      if (token.type === this.ws) {\n        this.changeIndent(token.value, token.col, token.line, token.offset);\n      } else {\n        this.changeIndent(\"\", token.col, token.line, token.offset);\n        this.tokens.push(token);\n      }\n    } else {\n      this.tokens.push(token);\n    }\n    this.afterNewLine = (token.type === this.end);\n  };\n\n  IndentedLexer.prototype.changeIndent = function (indent, col, line, offset) {\n    while (indent !== this.indents[this.indents.length - 1]) {\n      let prev = this.indents[this.indents.length - 1];\n      if (startsWith(indent, prev)) {  // more indentation than we had.\n        this.tokens.push({\n          type: 'indent',\n          text: indent,\n          value: indent,\n          lineBreaks: 0,\n          col: col,\n          line: line,\n          offset: offset,\n        });\n        this.indents.push(indent);\n        return;\n      } else if (startsWith(prev, indent)) { // less indentation than we had.\n        this.tokens.push({\n          type: 'dedent',\n          text: indent,\n          value: indent,\n          lineBreaks: 0,\n          col: col,\n          line: line,\n          offset: offset,\n        });\n        this.indents.pop();  // check the previous one.\n      } else {\n        prev = unicodeDebugString(prev);\n        indent = unicodeDebugString(indent);\n        throw Error('Indentations cannot be compared: ' + prev + ' and ' + indent + '.');\n      }\n    }\n  }\n\n  IndentedLexer.prototype.save = function () {\n    return this.lexer.save();\n  }\n\n  IndentedLexer.prototype.reset = function (data, info) {\n    this.lexer.reset(data, info);\n    this.indents = [''];\n    this.tokens = [];\n    this.afterNewLine = true;\n  }\n\n  IndentedLexer.prototype.formatError = function (token) {\n    return this.lexer.formatError(token, \"Invalid syntax\");\n  }\n\n  IndentedLexer.prototype.has = function (name) {\n    return this.lexer.has(name);\n  }\n\n  // ---------------------------------------------------------\n\n  function startsWith(str, prefix) {\n    return str.lastIndexOf(prefix, 0) === 0;\n  }\n\n  function unicodeDebugString(s) {\n    let u = '';\n    for (let i = 0; i < s.length; ++i) {\n      let n = s.charCodeAt(i), hex16 = '';\n      for (let j = 0; j < 4; ++j) {\n        let d = n % 16;\n        n /= 16;\n        let offset = (d < 10) ? 0x30 : 0x61 - 10\n        let ch = String.fromCharCode(d + offset);\n        hex16 = ch + hex16;\n      }\n      u += ('\\\\u' + hex16);\n    }\n    return '\"' + u + '\"';\n  }\n\n  // ---------------------------------------------------------\n\n  if (typeof module === 'object' && module.exports) {\n    module.exports = IndentedLexer;\n  } else {\n    window.IndentedLexer = IndentedLexer;\n  }\n})();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__rq8wc\"};","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Editor.module.scss';\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/theme-cobalt\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/webpack-resolver\";\n\nconst Editor = props => {\n\n  let [code, setCodeState] = useState(\"\");\n\n  // todo document this\n  const setCode = (code) => {\n    if (code[code.length - 1] !== '\\n') {\n      code += '\\n';\n    }\n    setCodeState(code);\n  }\n\n  return (\n    <div\n      className={style.Editor}\n    >\n      <div className={style.Top}>\n        {props.examples.map((example, i) =>\n          <button\n            key={i}\n            onClick={() => setCode(example)}\n          > Example {i} </button>\n        )}\n      </div>\n      <AceEditor\n        mode=\"python\"\n        theme=\"cobalt\"\n        onChange={setCode}\n        value={code}\n        height={'100%'}\n        width={'100%'}\n        // annotations={[{ row: 0, column: 10, type: 'error', text: 'Some error.'}]}\n      />\n      <div className={style.Bottom}>\n        <button onClick={() => props.onLogParseTree(code)}> Log parse tree </button>\n        <button onClick={() => props.onLogLexerOutput(code)}> Log tokens </button>\n        <button onClick={() => props.onSubmit(code)}> Run </button>\n      </div>\n    </div>\n  );\n};\n\nEditor.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onLogLexerOutput: PropTypes.func.isRequired,\n  onLogParseTree: PropTypes.func.isRequired,\n  examples: PropTypes.array,\n};\n\n\nEditor.defaultProps = {\n  examples: [\"123\", \"hello world\"],\n};\n\n\nexport default Editor;\n","export class BaseNode {\n\n  findCellsReferenced(env) {\n    return [];\n  }\n\n  unParse(env) {\n    throw Error(`Not implemented ${this.constructor.name}.unParse.`)\n  }\n\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class BinaryOperationNode extends BaseNode {\n  constructor(left,right) {\n    super();\n    this.left = left;\n    this.right = right;\n  }\n\n  findCellsReferenced(env) {\n    return this.left.findCellsReferenced(env).concat(this.right.findCellsReferenced(env));\n  }\n\n  unParse(env) {\n    return '( ' + this.left.unParse(env) + \" \" +  this.symbol + \" \" + this.right.unParse(env) + ' )';\n  }\n\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class AdditionNode extends BinaryOperationNode {\n\n  symbol = '+'\n\n  exec(env) {\n    return this.left.exec(env) + this.right.exec(env);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class SubtractionNode extends BinaryOperationNode {\n  symbol = '-'\n\n  exec(env) {\n    return this.left.exec(env) - this.right.exec(env);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class MultiplicationNode extends BinaryOperationNode {\n  symbol = '+'\n\n  exec(env) {\n    return this.left.exec(env) * this.right.exec(env);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class DivisionNode extends BinaryOperationNode {\n  symbol = '/'\n\n  exec(env) {\n    return this.left.exec(env) / this.right.exec(env);\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class FinalNode extends BaseNode {\n  constructor(token) {\n    super();\n    this.value = token.value;\n    this.type = token.type;\n    this.text = token.text;\n    this.offset  = token.offset\n    this.linebreaks = token.linebreaks;\n    this.line = token.line;\n    this.col = token.col;\n  }\n\n  exec() {\n    return this.value;\n  }\n\n  getErrorLineCol() {\n    return [this.col, this.line];\n  }\n\n  unParse(env) {\n    return this.text;\n  }\n}\n","import {FinalNode} from \"./FinalNode\";\n\nexport class NumberNode extends FinalNode {\n  unParse(env) {\n    return this.value.toString();\n  }\n}\n","import {UnaryOperator} from \"./UnaryOperator\";\n\nexport class NegativeNode extends UnaryOperator {\n  exec(env) {\n    return -this.operand.exec(env);\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class UnaryOperator extends BaseNode {\n  constructor(operand) {\n    super();\n    this.operand = operand;\n  }\n\n  findCellsReferenced(env) {\n    return this.operand.findCellsReferenced(env);\n  }\n}\n","import {FinalNode} from \"./FinalNode\";\n\nexport class FunctionIdentifierNode extends FinalNode {\n}\n","import {BaseNode} from \"./BaseNode\";\nimport {FunctionIdentifierNode} from \"./FunctionIdentifierNode\";\n\nexport class FunctionCallNode extends BaseNode {\n  constructor(identifierToken, args) {\n    super();\n    this.identifier = new FunctionIdentifierNode(identifierToken);\n    this.args = args;\n  }\n\n  exec(env) {\n\n    // todo\n    const ast = env.getFunctionAst(this.identifier);\n\n  }\n}\n","import {FinalNode} from \"./FinalNode\";\n\nexport class VariableNode extends FinalNode {\n\n  constructor(token) {\n    super(token);\n    this.identifier = token.value;\n  }\n\n  exec(env) {\n    return env.getVarByName(this.identifier).value;\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class RangeNode extends BaseNode {\n  constructor(startCell, endCell) {\n    super();\n    this.cell1 = startCell;\n    this.cell2 = endCell;\n  }\n\n  exec(env) {\n    return env.getCellsByRange(this.cell1,this.cell2).map(x=>x.value);\n  }\n\n  findCellsReferenced(env) {\n    return env.getCellsByRange(this.cell1, this.cell2);\n  }\n\n}\n","import {FinalNode} from \"./FinalNode\";\n\nexport class CellNode extends FinalNode {\n\n  constructor(token) {\n    super(token);\n    this.x = token.value.x;\n    this.y = token.value.y;\n  }\n\n  exec(env) {\n    return env.getCell(this.x, this.y).value;\n  }\n\n  findCellsReferenced(env) {\n    return [env.getCell(this.x, this.y)];\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class DynamicCellNode extends BaseNode {\n\n  constructor(x,y) {\n    super();\n    this.x = x;\n    this.y = y;\n  }\n\n  exec(env) {\n    const x = this.x.exec(env);\n    const y = this.y.exec(env);\n    return env.getCell(x, y).value;\n  }\n\n  unParse(env) {\n    const x = this.x.exec(env);\n    const y = this.y.exec(env);\n    return env.getCell(x, y).label;\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\nimport {UserError} from \"../parser/errors\";\nimport {VariableNode} from \"./VariableNode\";\nimport {CellNode} from \"./CellNode\";\nimport {NumberNode} from \"./NumberNode\";\nimport {BaseNode} from \"./BaseNode\";\nimport _ from 'lodash';\nimport {DynamicCellNode} from \"./DynamicCellNode\";\n\nexport class AssignmentNode extends BinaryOperationNode {\n\n  exec(env) {\n\n    if (this.left instanceof VariableNode) {\n      env.setVariable(this.left.value, this.right.exec(env));\n    } else if (this.left instanceof CellNode || this.left instanceof DynamicCellNode) {\n      let x, y;\n      if (this.left instanceof CellNode) {\n        x = this.left.x;\n        y = this.left.y;\n      } else {\n        x = this.left.x.exec(env);\n        y = this.left.y.exec(env);\n      }\n\n      let ast = _.cloneDeep(this.right);\n\n      // hack wrapper to stay DRY\n      const wrapper = {ast: ast};\n      replaceVariablesWithConstants(wrapper, env);\n      ast = wrapper.ast;\n      const formula = \"=\" + ast.unParse(env);\n      env.setCell(x, y, formula);\n\n    } else {\n      throw new UserError(\"Assign not to variable\");\n    }\n  }\n}\n\nfunction replaceVariablesWithConstants(ast, env) {\n  for (let property in ast) {\n    if (ast.hasOwnProperty(property)) {\n\n      if (ast[property] instanceof VariableNode) {\n        const varValue = env.getVarByName(ast[property].identifier).value\n        ast[property] = new NumberNode({value: varValue});\n      } else if (ast[property] instanceof BaseNode) {\n        replaceVariablesWithConstants(ast[property], env);\n      }\n\n    }\n  }\n}\n\n// trudny przypadek\n// i = 5\n// while i < 10\n//    cell[i,0] = i\n//    i += 1\n\n// trzeba w ktoryms momencie dynamicznie zmienic drzewo parsowania, ta zeby wezel zmiennej i zostal zamieniony\n// na wezel typu stałej, o wartoscie zmiennej i w danym momemencie\n// mysle zeby to zrobic w metodzie exec wezla assignment node, przejde po calym ast i podstawie wszystkie wywolania\n// zmiennych\n\n\n// super trudny przypadek\n// mnoznik = 5\n// def fun(komorka):\n//    while mnoznik < 10\n//        mnoznik = mnoznik * 2\n//    return mnoznik * komorka\n// mnoznik = 10\n// A1 = fun(A2)\n// mnoznik = 15\n\n\n// czy wgl pozwalac na funkcje korzystajace ze zmiennych globalnych?\n// jezeli tak to w tym przypadku w wywolaniu funkcj nie wystarczy przechowywac jej identyfikatora,\n// trzeba jakos przechowywac wartosc zmiennych globalnych w momencie rozpoczecia funkcji\n\n// albo (latwiej) nie pozwalac na wykorzystywanie zmiennych globalnych w funkcjach\n\n\n// nie moge pozwalac na konstrukcje w ktory dynamiczne odwolanie jest po prawej stronie: A1 = cell(A2,A3)\n// a w konstrukcjach typu cell(A2,A3) = 5*A1  zostanie wykokonane przypisanie do komorki o wspolrzednych,\n// ktore okreslaja A2 oraz A3 w momencie wykonania, pozniejsze zmiany A2 i A3 nie beda mialy wplywy na to przypisanie\n\n\n// ciekawy przypadek\n//\n// wpisze do komorki A1 wartosc rowna 5\n// wykonam kod:\n// zmienna = A1\n// A2 = zmienna\n//\n// wtedy w komorce A2 bede mial wartosc 5\n\n// zwrocmy uwage ze kolejnosc operacji jest tutaj wazna\n// jezeli zrobie na odwrot:\n//\n// wykonam kod:\n// zmienna = A1\n// A2 = zmienna\n// wpisze do komorki A1 wartosc rowna 5\n//\n// to komorka A2 bedzie miala wartosc pusta\n\n\n// jak uzyskac formule z drzewa parsowania?\n// np uzytkownik wpisuje\n//\n// zmienna = 5\n// A1 = A2 * zmienna\n//\n// ja teraz chce zeby po kliniecie komorki A1 w arkuszu wyświetlilo sie:  =A2*5\n// w momencie wywolania przypisania do komorki:\n// 1) przejsc sie po drzewie parsowania i podstawic stale w miejsce odwolan do zmiennych\n// 2) w kazdym nodzie uzywanym w formulaGrammar zaimplementowac metode unparse, ktora pozwoli stoworzyc\n// stringa na podstawie drzewa parsowania\n\n\n// czy w kodzie jest jakis odpowiednik wpisania\n","import {BaseNode} from \"./BaseNode\";\n\nexport class WhileNode extends BaseNode {\n  constructor(condition, block) {\n    super();\n    this.condition = condition;\n    this.block = block;\n  }\n\n  exec(env) {\n    while (this.condition.exec(env)) {\n      this.block.exec(env);\n    }\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class ifElseNode extends BaseNode {\n  constructor(condition, block, elseBlock) {\n    super();\n    this.condition = condition;\n    this.block = block;\n    this.elseBlock = elseBlock;\n  }\n\n  exec(env) {\n    if (this.condition.exec(env)) {\n      this.block.exec(env);\n    } else {\n      if (this.elseBlock !== null) {\n        this.elseBlock.exec(env);\n      }\n    }\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class ListNode extends BaseNode {\n  constructor(list) {\n    super();\n    this.list = list;\n  }\n\n  exec(env) {\n    for (const node of this.list) {\n      node.exec(env);\n    }\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class EqualNode extends BinaryOperationNode {\n  exec(environ) {\n    return this.left.exec(environ) === this.right.exec(environ);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class GreaterEqualNode extends BinaryOperationNode {\n  exec(env) {\n    return this.left.exec(env) >= this.right.exec(env);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class LessEqualNode extends BinaryOperationNode {\n  exec(env) {\n    return this.left.exec(env) <= this.right.exec(env);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class LessNode extends BinaryOperationNode {\n  exec(env) {\n    return this.left.exec(env) < this.right.exec(env);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class GreaterNode extends BinaryOperationNode {\n  exec(env) {\n    return this.left.exec(env) > this.right.exec(env);\n  }\n}\n","import {BinaryOperationNode} from \"./BinaryOperationNode\";\n\nexport class NotEqualNode extends BinaryOperationNode {\n  exec(env) {\n    return this.left.exec(env) !== this.right.exec(env);\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\nimport {FunctionIdentifierNode} from \"./FunctionIdentifierNode\";\n\nexport class FunctionDefNode extends BaseNode{\n  constructor(identifierToken,args,block) {\n    super();\n    this.identifier = new FunctionIdentifierNode(identifierToken);\n    this.args = args;\n    this.block = block;\n  }\n}\n","import {BaseNode} from \"./BaseNode\";\n\nexport class ReferenceNode extends BaseNode {\n  constructor(identifier, referenced) {\n    super();\n    this.identifier = identifier;\n    this.referenced = referenced;\n  }\n}\n","import {AdditionNode} from \"../nodes/AdditionNode\";\nimport {SubtractionNode} from \"../nodes/SubtractionNode\";\nimport {MultiplicationNode} from \"../nodes/MultiplicationNode\";\nimport {DivisionNode} from \"../nodes/DivisionNode\";\nimport {NumberNode} from \"../nodes/NumberNode\";\nimport {NegativeNode} from \"../nodes/NegativeNode\";\nimport {FunctionCallNode} from \"../nodes/FunctionCallNode\";\nimport {VariableNode} from \"../nodes/VariableNode\";\nimport {RangeNode} from \"../nodes/RangeNode\";\nimport {AssignmentNode} from \"../nodes/AssignmentNode\";\nimport {WhileNode} from \"../nodes/WhileNode\";\nimport {ifElseNode} from \"../nodes/IfElseNode\";\nimport {CellNode} from \"../nodes/CellNode\";\nimport {ListNode} from \"../nodes/ListNode\";\nimport {EqualNode} from \"../nodes/EqualNode\";\nimport {GreaterEqualNode} from \"../nodes/GreaterEqualNode\";\nimport {LessEqualNode} from \"../nodes/LessEqualNode\";\nimport {LessNode} from \"../nodes/LessNode\";\nimport {GreaterNode} from \"../nodes/GreaterNode\";\nimport {NotEqualNode} from \"../nodes/NotEqualNode\";\nimport {FunctionDefNode} from \"../nodes/FunctionDefNode\";\nimport {DynamicCellNode} from \"../nodes/DynamicCellNode\";\nimport {ReferenceNode} from \"../nodes/ReferenceNode\";\n\nexport function addition([a, _, b]) {\n  return new AdditionNode(a, b);\n}\n\nexport function subtraction([a, _, b]) {\n  return new SubtractionNode(a, b);\n}\n\nexport function multiplication([a, _, b]) {\n  return new MultiplicationNode(a, b);\n\n}\n\nexport function division([a, _, b]) {\n  return new DivisionNode(a, b);\n\n}\n\nexport function number([token]) {\n  return new NumberNode(token)\n}\n\nexport function negative([_, operand]) {\n  return new NegativeNode(operand);\n}\n\nexport function functionCall([identifierToken, _, args]) {\n  return new FunctionCallNode(identifierToken, args);\n}\n\nexport function equal([a, _, b]) {\n  return new EqualNode(a, b);\n}\n\nexport function greaterEqual([a, _, b]) {\n  return new GreaterEqualNode(a, b);\n}\n\nexport function lessEqual([a, _, b]) {\n  return new LessEqualNode(a, b);\n}\n\nexport function less([a, _, b]) {\n  return new LessNode(a, b);\n}\n\nexport function greater([a, _, b]) {\n  return new GreaterNode(a, b);\n}\n\nexport function notEqual([a, _, b]) {\n  return new NotEqualNode(a, b);\n}\n\n\nexport function variable([identifierToken]) {\n  return new VariableNode(identifierToken);\n}\n\nexport function range([cell1, _, cell2]) {\n  return new RangeNode(cell1, cell2);\n}\n\nexport function list([first, list]) {\n  const result = [first];\n  for (const el of list) {\n    result.push(el[0]);\n  }\n  return new ListNode(result);\n}\n\nexport function assigment([left, _, right]) {\n  return new AssignmentNode(left, right);\n}\n\nexport function block([, code]) {\n  return code;\n}\n\nexport function whileLoop([, expr, , block]) {\n  return new WhileNode(expr, block);\n}\n\nexport function ifElse([, expr, , block, elseBlock]) {\n  return new ifElseNode(expr, block, elseBlock);\n}\n\nexport function elseBlock([, , block]) {\n  return block;\n}\n\nexport function emptyList() {\n  return []\n}\n\nexport function cell([cell]) {\n  return new CellNode(cell);\n}\n\nexport function functionDef([_def, identifierToken, _lparen, args, _rparen, _end, block]) {\n  return new FunctionDefNode(identifierToken, args, block)\n}\n\nexport function dynamicCell([_lsquare, x, _semicolon, y, _rsquare]) {\n  return new DynamicCellNode(x, y);\n}\n\nexport function reference([identifier, _assign, _ampersand, referenced]) {\n  return new ReferenceNode(identifier, referenced);\n}\n","import * as moo from 'moo'\nimport IndentedLexer from './indentedLexer'\n\nfunction divideIntoLettersAndNumber(cellIdentifier) {\n  const regex = /([a-zA-Z]+)([0-9]+)/;\n  const match = regex.exec(cellIdentifier);\n\n  return [match[1], match[2]];\n}\n\nexport function getCellIndexes(cellIdentifier) {\n  const [letters, digits] = divideIntoLettersAndNumber(cellIdentifier);\n\n  const y_index = parseInt(digits) - 1;\n\n  let x_index = 0;\n  for (let i = 0; i < letters.length; i++) {\n    x_index *= (\"Z\".charCodeAt(0) - 'A'.charCodeAt(0) + 1);\n    x_index += letters[i].charCodeAt(0) - \"A\".charCodeAt(0);\n  }\n  return {x: x_index, y: y_index}\n}\n\nconst tokens = {\n  ws: /[ \\t\\u00A0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u3000]+/,\n  end: {match: /\\n/, lineBreaks: true},\n  cell: {\n    match: /[a-zA-Z]+[0-9]+/,\n    value: x => getCellIndexes(x),\n  },\n  identifier: {\n    match: /[a-zA-Z]+/,\n    type: moo.keywords({\n      \"kwIf\": \"if\",\n      \"kwWhile\": \"while\",\n      \"kwFor\": \"for\",\n      \"kwElse\": \"else\",\n      \"kwDef\": \"def\",\n      \"kwReturn\": \"return\",\n    })\n  },\n  ampersand: '&',\n  dot: '.',\n  lparen: '(',\n  rparen: ')',\n  lsquare: '[',\n  rsquare: ']',\n  plus: '+',\n  asterisk: '*',\n  slash: '/',\n  minus: '-',\n  semicolon: ';',\n  colon: ':',\n  equal: '==',\n  greaterEqual: '>=',\n  lessEqual: '<=',\n  less: '<',\n  greater: '>',\n  notEqual: '!=',\n  assign: '=',\n  string: /\".*?\"/,\n  number: {\n    match: /[1-9][0-9]*(?:,[0-9]*)?|0(?:\\.[0-9]+)?/, // (?: non capturing group\n    value: x => parseFloat(x),\n  },\n\n};\n\nexport const lexer = new IndentedLexer(moo.compile(tokens), 'ws', 'end');\n\n","// Generated automatically by nearley, version 2.19.1\n// http://github.com/Hardmath123/nearley\nfunction id(x) { return x[0]; }\n\n  /* eslint-disable */\n  import * as p from './parserPostProcessors.js'\n  import {lexer} from './lexer.js'\nlet Lexer = lexer;\nlet ParserRules = [\n    {\"name\": \"formulaEntry\", \"symbols\": [\"sum\"]},\n    {\"name\": \"expr\", \"symbols\": [\"comparison\"], \"postprocess\": id},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\"], \"postprocess\": id},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"equal\") ? {type: \"equal\"} : equal), \"sum\"], \"postprocess\": p.equal},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"greaterEqual\") ? {type: \"greaterEqual\"} : greaterEqual), \"sum\"], \"postprocess\": p.greaterEqual},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"lessEqual\") ? {type: \"lessEqual\"} : lessEqual), \"sum\"], \"postprocess\": p.lessEqual},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"less\") ? {type: \"less\"} : less), \"sum\"], \"postprocess\": p.less},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"greater\") ? {type: \"greater\"} : greater), \"sum\"], \"postprocess\": p.greater},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"notEqual\") ? {type: \"notEqual\"} : notEqual), \"sum\"], \"postprocess\": p.notEqual},\n    {\"name\": \"sum\", \"symbols\": [\"product\"], \"postprocess\": id},\n    {\"name\": \"sum\", \"symbols\": [\"sum\", (lexer.has(\"plus\") ? {type: \"plus\"} : plus), \"product\"], \"postprocess\": p.addition},\n    {\"name\": \"sum\", \"symbols\": [\"sum\", (lexer.has(\"minus\") ? {type: \"minus\"} : minus), \"product\"], \"postprocess\": p.subtraction},\n    {\"name\": \"product\", \"symbols\": [\"primary\"], \"postprocess\": id},\n    {\"name\": \"product\", \"symbols\": [\"product\", (lexer.has(\"asterisk\") ? {type: \"asterisk\"} : asterisk), \"primary\"], \"postprocess\": p.multiplication},\n    {\"name\": \"product\", \"symbols\": [\"product\", (lexer.has(\"slash\") ? {type: \"slash\"} : slash), \"primary\"], \"postprocess\": p.division},\n    {\"name\": \"primary\", \"symbols\": [(lexer.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"expr\", (lexer.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\": (data) => data[1]},\n    {\"name\": \"primary\", \"symbols\": [(lexer.has(\"number\") ? {type: \"number\"} : number)], \"postprocess\": p.number},\n    {\"name\": \"primary\", \"symbols\": [\"variable\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [\"function_call\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [\"range\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [\"cell\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [(lexer.has(\"minus\") ? {type: \"minus\"} : minus), \"primary\"], \"postprocess\": p.negative},\n    {\"name\": \"primary\", \"symbols\": [\"dynamicCell\"], \"postprocess\": id},\n    {\"name\": \"dynamicCell\", \"symbols\": [(lexer.has(\"lsquare\") ? {type: \"lsquare\"} : lsquare), \"sum\", (lexer.has(\"semicolon\") ? {type: \"semicolon\"} : semicolon), \"sum\", (lexer.has(\"rsquare\") ? {type: \"rsquare\"} : rsquare)], \"postprocess\": p.dynamicCell},\n    {\"name\": \"cell\", \"symbols\": [(lexer.has(\"cell\") ? {type: \"cell\"} : cell)], \"postprocess\": p.cell},\n    {\"name\": \"variable\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": p.variable},\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier), (lexer.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"args\", (lexer.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\": p.functionCall},\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"kwIf\") ? {type: \"kwIf\"} : kwIf), (lexer.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"args\", (lexer.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\": p.functionCall},\n    {\"name\": \"args$ebnf$1\", \"symbols\": []},\n    {\"name\": \"args$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"semicolon\") ? {type: \"semicolon\"} : semicolon), \"expr\"]},\n    {\"name\": \"args$ebnf$1\", \"symbols\": [\"args$ebnf$1\", \"args$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"args\", \"symbols\": [\"expr\", \"args$ebnf$1\"], \"postprocess\": p.list},\n    {\"name\": \"args\", \"symbols\": [], \"postprocess\": p.emptyList},\n    {\"name\": \"range\", \"symbols\": [\"cell\", (lexer.has(\"colon\") ? {type: \"colon\"} : colon), \"cell\"], \"postprocess\": p.range},\n    {\"name\": \"entry$ebnf$1\", \"symbols\": []},\n    {\"name\": \"entry$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"end\") ? {type: \"end\"} : end)]},\n    {\"name\": \"entry$ebnf$1\", \"symbols\": [\"entry$ebnf$1\", \"entry$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"entry$ebnf$2\", \"symbols\": []},\n    {\"name\": \"entry$ebnf$2$subexpression$1\", \"symbols\": [(lexer.has(\"end\") ? {type: \"end\"} : end)]},\n    {\"name\": \"entry$ebnf$2\", \"symbols\": [\"entry$ebnf$2\", \"entry$ebnf$2$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"entry\", \"symbols\": [\"entry$ebnf$1\", \"code\", \"entry$ebnf$2\"], \"postprocess\": (data) => [data[1]]},\n    {\"name\": \"code$ebnf$1\", \"symbols\": []},\n    {\"name\": \"code$ebnf$1$subexpression$1\", \"symbols\": [\"statement\"]},\n    {\"name\": \"code$ebnf$1\", \"symbols\": [\"code$ebnf$1\", \"code$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"code\", \"symbols\": [\"statement\", \"code$ebnf$1\"], \"postprocess\": p.list},\n    {\"name\": \"statement\", \"symbols\": [\"expr\", \"ends\"], \"postprocess\": id},\n    {\"name\": \"statement\", \"symbols\": [\"reference\"], \"postprocess\": id},\n    {\"name\": \"statement\", \"symbols\": [\"assigment\", \"ends\"], \"postprocess\": id},\n    {\"name\": \"statement\", \"symbols\": [\"blockStatement\"], \"postprocess\": id},\n    {\"name\": \"blockStatement\", \"symbols\": [(lexer.has(\"kwWhile\") ? {type: \"kwWhile\"} : kwWhile), \"expr\", \"ends\", \"block\"], \"postprocess\": p.whileLoop},\n    {\"name\": \"blockStatement$ebnf$1$subexpression$1\", \"symbols\": [\"else\"]},\n    {\"name\": \"blockStatement$ebnf$1\", \"symbols\": [\"blockStatement$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"blockStatement$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"blockStatement\", \"symbols\": [(lexer.has(\"kwIf\") ? {type: \"kwIf\"} : kwIf), \"expr\", \"ends\", \"block\", \"blockStatement$ebnf$1\"], \"postprocess\": p.ifElse},\n    {\"name\": \"blockStatement\", \"symbols\": [(lexer.has(\"kwDef\") ? {type: \"kwDef\"} : kwDef), (lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier), (lexer.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"args\", (lexer.has(\"rparen\") ? {type: \"rparen\"} : rparen), \"ends\", \"block\"], \"postprocess\": p.functionDef},\n    {\"name\": \"else\", \"symbols\": [(lexer.has(\"kwElse\") ? {type: \"kwElse\"} : kwElse), \"ends\", \"block\"], \"postprocess\": p.elseBlock},\n    {\"name\": \"assigment\", \"symbols\": [\"variable\", (lexer.has(\"assign\") ? {type: \"assign\"} : assign), \"expr\"], \"postprocess\": p.assigment},\n    {\"name\": \"assigment\", \"symbols\": [\"cell\", (lexer.has(\"assign\") ? {type: \"assign\"} : assign), \"expr\"], \"postprocess\": p.assigment},\n    {\"name\": \"assigment\", \"symbols\": [\"dynamicCell\", (lexer.has(\"assign\") ? {type: \"assign\"} : assign), \"expr\"], \"postprocess\": p.assigment},\n    {\"name\": \"block\", \"symbols\": [(lexer.has(\"indent\") ? {type: \"indent\"} : indent), \"code\", (lexer.has(\"dedent\") ? {type: \"dedent\"} : dedent)], \"postprocess\": p.block},\n    {\"name\": \"ends$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"end\") ? {type: \"end\"} : end)]},\n    {\"name\": \"ends$ebnf$1\", \"symbols\": [\"ends$ebnf$1$subexpression$1\"]},\n    {\"name\": \"ends$ebnf$1$subexpression$2\", \"symbols\": [(lexer.has(\"end\") ? {type: \"end\"} : end)]},\n    {\"name\": \"ends$ebnf$1\", \"symbols\": [\"ends$ebnf$1\", \"ends$ebnf$1$subexpression$2\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"ends\", \"symbols\": [\"ends$ebnf$1\"], \"postprocess\": null},\n    {\"name\": \"reference\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier), (lexer.has(\"assign\") ? {type: \"assign\"} : assign), (lexer.has(\"ampersand\") ? {type: \"ampersand\"} : ampersand), \"range\"], \"postprocess\": p.reference},\n    {\"name\": \"reference\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier), (lexer.has(\"assign\") ? {type: \"assign\"} : assign), (lexer.has(\"ampersand\") ? {type: \"ampersand\"} : ampersand), \"cell\"], \"postprocess\": p.reference}\n];\nlet ParserStart = \"entry\";\nexport default { Lexer, ParserRules, ParserStart };\n","// Generated automatically by nearley, version 2.19.1\n// http://github.com/Hardmath123/nearley\nfunction id(x) { return x[0]; }\n\n  /* eslint-disable */\n  import * as p from './parserPostProcessors.js'\n  import {lexer} from './lexer.js'\nlet Lexer = lexer;\nlet ParserRules = [\n    {\"name\": \"formulaEntry\", \"symbols\": [\"sum\"]},\n    {\"name\": \"expr\", \"symbols\": [\"comparison\"], \"postprocess\": id},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\"], \"postprocess\": id},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"equal\") ? {type: \"equal\"} : equal), \"sum\"], \"postprocess\": p.equal},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"greaterEqual\") ? {type: \"greaterEqual\"} : greaterEqual), \"sum\"], \"postprocess\": p.greaterEqual},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"lessEqual\") ? {type: \"lessEqual\"} : lessEqual), \"sum\"], \"postprocess\": p.lessEqual},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"less\") ? {type: \"less\"} : less), \"sum\"], \"postprocess\": p.less},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"greater\") ? {type: \"greater\"} : greater), \"sum\"], \"postprocess\": p.greater},\n    {\"name\": \"comparison\", \"symbols\": [\"sum\", (lexer.has(\"notEqual\") ? {type: \"notEqual\"} : notEqual), \"sum\"], \"postprocess\": p.notEqual},\n    {\"name\": \"sum\", \"symbols\": [\"product\"], \"postprocess\": id},\n    {\"name\": \"sum\", \"symbols\": [\"sum\", (lexer.has(\"plus\") ? {type: \"plus\"} : plus), \"product\"], \"postprocess\": p.addition},\n    {\"name\": \"sum\", \"symbols\": [\"sum\", (lexer.has(\"minus\") ? {type: \"minus\"} : minus), \"product\"], \"postprocess\": p.subtraction},\n    {\"name\": \"product\", \"symbols\": [\"primary\"], \"postprocess\": id},\n    {\"name\": \"product\", \"symbols\": [\"product\", (lexer.has(\"asterisk\") ? {type: \"asterisk\"} : asterisk), \"primary\"], \"postprocess\": p.multiplication},\n    {\"name\": \"product\", \"symbols\": [\"product\", (lexer.has(\"slash\") ? {type: \"slash\"} : slash), \"primary\"], \"postprocess\": p.division},\n    {\"name\": \"primary\", \"symbols\": [(lexer.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"expr\", (lexer.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\": (data) => data[1]},\n    {\"name\": \"primary\", \"symbols\": [(lexer.has(\"number\") ? {type: \"number\"} : number)], \"postprocess\": p.number},\n    {\"name\": \"primary\", \"symbols\": [\"variable\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [\"function_call\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [\"range\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [\"cell\"], \"postprocess\": id},\n    {\"name\": \"primary\", \"symbols\": [(lexer.has(\"minus\") ? {type: \"minus\"} : minus), \"primary\"], \"postprocess\": p.negative},\n    {\"name\": \"primary\", \"symbols\": [\"dynamicCell\"], \"postprocess\": id},\n    {\"name\": \"dynamicCell\", \"symbols\": [(lexer.has(\"lsquare\") ? {type: \"lsquare\"} : lsquare), \"sum\", (lexer.has(\"semicolon\") ? {type: \"semicolon\"} : semicolon), \"sum\", (lexer.has(\"rsquare\") ? {type: \"rsquare\"} : rsquare)], \"postprocess\": p.dynamicCell},\n    {\"name\": \"cell\", \"symbols\": [(lexer.has(\"cell\") ? {type: \"cell\"} : cell)], \"postprocess\": p.cell},\n    {\"name\": \"variable\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": p.variable},\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier), (lexer.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"args\", (lexer.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\": p.functionCall},\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"kwIf\") ? {type: \"kwIf\"} : kwIf), (lexer.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"args\", (lexer.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\": p.functionCall},\n    {\"name\": \"args$ebnf$1\", \"symbols\": []},\n    {\"name\": \"args$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"semicolon\") ? {type: \"semicolon\"} : semicolon), \"expr\"]},\n    {\"name\": \"args$ebnf$1\", \"symbols\": [\"args$ebnf$1\", \"args$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"args\", \"symbols\": [\"expr\", \"args$ebnf$1\"], \"postprocess\": p.list},\n    {\"name\": \"args\", \"symbols\": [], \"postprocess\": p.emptyList},\n    {\"name\": \"range\", \"symbols\": [\"cell\", (lexer.has(\"colon\") ? {type: \"colon\"} : colon), \"cell\"], \"postprocess\": p.range}\n];\nlet ParserStart = \"formulaEntry\";\nexport default { Lexer, ParserRules, ParserStart };\n","import * as nearley from 'nearley';\nimport grammar from \"./grammar.js\";\nimport formulaGrammar from \"./formulaGrammar.js\";\n\nimport {UserError} from \"./errors\";\n\nexport class Parser {\n  constructor() {\n    this.parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));\n  }\n\n  feed(s) {\n    try {\n      this.parser.feed(s);\n    } catch (e) {\n      throw new UserError(e.message);\n    }\n  }\n\n  get results() {\n    try {\n      return this.parser.results[0][0];\n    }catch (e) {\n      return null;\n    }\n  }\n}\n\n\nexport class FormulaParser {\n  constructor() {\n    this.parser = new nearley.Parser(nearley.Grammar.fromCompiled(formulaGrammar));\n  }\n\n  feed(s) {\n    try {\n      this.parser.feed(s);\n    } catch (e) {\n      throw new UserError(\"Syntax error\");\n    }\n  }\n\n  get results() {\n    try {\n      return this.parser.results[0][0];\n    }catch (e) {\n      return null;\n    }\n  }\n}\n","export class Variable {\n\n  constructor(value) {\n    this.value = value;\n  }\n  value = null;\n}\n","import {observable} from \"mobx\";\n\nexport class Cell {\n\n  @observable formula = null;\n  @observable value = null;\n  @observable background = null;\n  @observable error = null;\n\n  ast = null;\n  // vars that observe us -> we are used in their formula\n  observers = [];\n  // vars that we observe for changes -> we use them in our formula\n  subjects = [];\n\n  constructor(x, y, label) {\n    this.x = x;\n    this.y = y;\n    this.label = label;\n  }\n\n  unregisterFromAllSubjects() {\n    for (const cell of this.subjects) {\n      cell._unregisterObserver(this);\n    }\n    this.subjects = [];\n  }\n\n  observe(cell) {\n    cell.observers.push(this);\n    this.subjects.push(cell);\n  }\n\n  _unregisterObserver(v) {\n    const index = this.observers.indexOf(v);\n    if (index === this.observers.length - 1) {\n      this.observers.pop();\n    } else {\n      this.observers[index] = this.observers.pop();\n    }\n  }\n}\n","import {UserError} from \"../parser/errors\";\nimport {FormulaParser} from \"../parser/parsers\";\nimport {isFormula, letterLabelGenerator, topologicalSort} from \"../utils\";\nimport {Variable} from \"./Variable\";\nimport {Cell} from \"./Cell\";\n\nexport class Environment {\n\n  constructor(x, y) {\n    this.funcitons = {};\n    this.x = x;\n    this.y = y;\n    this.cells = Array(y);\n    for (let i = 0; i < y; i++) {\n      this.cells[i] = Array(x);\n      const gen = letterLabelGenerator();\n      for (let j = 0; j < x; j++) {\n        const label = gen.next().value + (i + 1).toString();\n        this.cells[i][j] = new Cell(j, i, label);\n      }\n    }\n\n    this.variablesScopes = [{}];\n  }\n\n  setCell(x, y, string) {\n    const cell = this.getCell(x, y);\n    cell.unregisterFromAllSubjects();\n    try {\n\n      if (isFormula(string)) {\n        this._setCellFormula(cell, string)\n      } else {\n        this._setCellValue(cell, string);\n      }\n\n      this.updateObservers(cell);\n      cell.error = null;\n    } catch (e) {\n      if (e.name !== \"UserError\") {\n        throw e;\n      }\n      cell.error = e.message;\n    }\n  }\n\n\n  _setCellFormula(cell, formula) {\n    cell.formula = formula;\n    const parser = new FormulaParser();\n    parser.feed(formula.substring(1));\n    cell.ast = parser.results;\n    cell.value = cell.ast.exec(this);\n\n    const varsReferenced = cell.ast.findCellsReferenced(this);\n    for (const v of varsReferenced) {\n      cell.observe(v);\n    }\n  }\n\n  _setCellValue(variable, value) {\n    const x = parseFloat(value);\n    if (!isNaN(x)) {\n      variable.value = x;\n    } else {\n      variable.value = value;\n    }\n    variable.formula = null;\n    variable.ast = null;\n  }\n\n\n  getCellsByRange(start, end) {\n\n    const x1 = start.x;\n    const y1 = start.y;\n    const x2 = start.x;\n    const y2 = start.y;\n\n    if (this.x <= x1 || this.y <= y1) {\n      throw new UserError(`No cell: ${start}`)\n    }\n    if (this.x <= x2 || this.y <= y2) {\n      throw new UserError(`No cell: ${end}`)\n    }\n\n    const result = [];\n\n    for (let i = y1; i <= y2; i++) {\n      for (let j = x1; j <= x2; j++) {\n        result.push(this.cells[i][j]);\n      }\n    }\n\n    return result;\n  }\n\n  getCell(x, y) {\n    try {\n      return this.cells[y][x];\n    } catch (e) {\n      throw new UserError(\"No such cell\");\n    }\n  }\n\n\n  updateObservers(cell) {\n    for (const x of topologicalSort(cell)) {\n      x.value = x.ast.exec(this);\n    }\n  }\n\n\n  getFunctionAst(identifier) {\n    if (!this.funcitons.hasOwnProperty(identifier)) {\n      throw new UserError(`No function: ${identifier}`);\n    }\n    return this.funcitons[identifier];\n  }\n\n\n  setVariable(identifier, value) {\n    const variables = this.variablesScopes[this.variablesScopes.length - 1];\n    let variable;\n    try {\n      variable = this.getVarByName(identifier);\n      variable.value = value;\n    } catch (e) {\n      variables[identifier] = new Variable(value);\n    }\n  }\n\n\n  getVarByName(identifier) {\n    const variables = this.variablesScopes[this.variablesScopes.length - 1];\n    if (variables.hasOwnProperty(identifier)) {\n      return variables[identifier];\n    } else {\n      throw new UserError(`No variable: ${identifier}`);\n    }\n  }\n}\n","import {Environment} from \"../environment/Environment\";\nimport {Parser} from \"../parser/parsers\";\nimport {lexer} from \"../parser/lexer\";\n\n\nexport class SpreadsheetStore {\n\n  constructor(x, y) {\n    this.env = new Environment(x, y);\n  }\n\n  onCellSet(x, y, value) {\n    this.env.setCell(x, y, value);\n  }\n\n  get cells() {\n    return this.env.cells;\n  }\n\n  run(code) {\n    if (code === \"\") {\n      return;\n    }\n    try {\n      const parser = new Parser();\n      parser.feed(code);\n      parser.results.exec(this.env);\n    } catch (e) {\n      if (e.name !== \"UserError\") {\n        throw e;\n      }\n      // todo fancy errors\n      console.log(e.message);\n    }\n  }\n\n  logParseTree(code) {\n    try {\n      const parser = new Parser();\n      parser.feed(code);\n      console.log(parser.results);\n    } catch (e) {\n      if (e.name !== \"UserError\") {\n        throw e;\n      }\n      console.log(e.message);\n    }\n  }\n\n  logLexerOutput(code) {\n    try {\n      lexer.reset(code);\n      const result = [];\n      let tok = lexer.next();\n      while (tok !== undefined) {\n        result.push(tok);\n        tok = lexer.next()\n      }\n      console.log(result);\n    } catch (e) {\n      if (e.name !== \"UserError\") {\n        throw e;\n      }\n\n      console.log(e.message);\n    }\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export class UserError extends Error {\n  constructor(...params) {\n    super(...params);\n    this.name = \"UserError\";\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UserError);\n    }\n  }\n}\n"],"sourceRoot":""}