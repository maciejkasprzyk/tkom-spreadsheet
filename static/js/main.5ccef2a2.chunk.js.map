{"version":3,"sources":["components/Spreadsheet.js","mobx/SpreadsheetStore.js","App.js","serviceWorker.js","index.js","components/Spreadsheet.module.scss"],"names":["letterLabelGenerator","nextChar","c","String","fromCharCode","charCodeAt","label","slice","reverse","join","index","length","push","observer","props","initial","useState","editing","_setEditing","cell","x","y","useEditing","isEditing","setEditing","onInputKeyDown","e","keyCode","target","blur","rowLabelsGen","className","style","Spreadsheet","Array","fill","map","_","i","key","next","value","cells","row","j","onClick","onKeyDown","onFocus","formula","parentNode","classList","add","focus","onBlur","onCellSet","remove","autoFocus","error","SpreadsheetStore","this","Cell","cellLabel","toUpperCase","letters","substring","digits","Error","y_index","parseInt","x_index","sheet","observers","subjects","string","unregisterFromAllSubjects","charAt","isFormula","cellsReferenced","getCellByLabel","calculateValue","observe","topologicalSort","message","unregisterObserver","registerObserver","visited","sorted","dfs","includes","neighbour","indexOf","pop","cellReferenced","observable","store","App","useEffect","set","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.5ccef2a2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {observer} from \"mobx-react\";\nimport style from './Spreadsheet.module.scss'\nimport PropTypes from 'prop-types'\n\n/**\n * It returns strings like this: \"A\", \"B\", ... , \"Z\", \"AA\", \"AB\", ...\n */\nfunction* letterLabelGenerator() {\n  function nextChar(c) {\n    return String.fromCharCode(c.charCodeAt(0) + 1);\n  }\n\n  const label = ['A'];\n  while (true) {\n    yield label.slice().reverse().join(\"\");\n    let index = 0;\n    label[index] = nextChar(label[index]);\n    while (label[index].charCodeAt(0) > 'Z'.charCodeAt(0)) {\n      label[index] = 'A';\n      index++;\n      if (index >= label.length) {\n        label.push('A');\n        break;\n      }\n      label[index] = nextChar(label[index]);\n    }\n  }\n}\n\n\nconst Spreadsheet = props => {\n\n  let [isEditing, setEditing] = useEditing();\n\n\n  const onInputKeyDown = (e) => {\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n  };\n\n  const onBlur = (e, cell) => {\n    props.onCellSet(cell, e.target.value);\n    e.target.parentNode.classList.remove(style.focus);\n    if (isEditing(cell)){\n      setEditing(null);\n    }\n  };\n\n  const onFocus = (e, cell) => {\n    e.target.value = cell.formula ? cell.formula : cell.value;\n    e.target.parentNode.classList.add(style.focus)\n  };\n\n  const onClick = (e, cell) => {\n    setEditing(cell);\n  };\n\n  const rowLabelsGen = letterLabelGenerator();\n\n  return (\n    <div className={style.Spreadsheet}>\n      <table>\n        <thead>\n        <tr>\n          <th/>\n          {Array(props.x).fill(0).map((_, i) =>\n            <th key={i}>\n              {rowLabelsGen.next().value}\n            </th>\n          )}\n        </tr>\n        </thead>\n        <tbody>\n        {props.cells.map((row, i) =>\n          <tr key={i}>\n            <th>{i + 1}</th>\n            {row.map((cell, j) =>\n              <td\n                onClick={e => onClick(e, cell)}\n                key={j}>\n                {isEditing(cell) ?\n                  <input\n                    onKeyDown={onInputKeyDown}\n                    onFocus={e => onFocus(e, cell)}\n                    onBlur={e => onBlur(e, cell)}\n                    autoFocus={true}\n                  /> :\n                  <div\n                    className={cell.error? style.error : \"\"}\n                  >\n                    {cell.error? cell.error : cell.value}\n                  </div>\n                }\n              </td>\n            )}\n          </tr>\n        )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nfunction useEditing(initial) {\n\n  let [editing, _setEditing] = useState(initial);\n\n  const setEditing = (cell) => {\n    if (cell == null) {\n      _setEditing(null)\n    }\n    else {\n      _setEditing({x: cell.x, y: cell.y})\n    }\n  };\n\n  const isEditing = (cell) => {\n    return editing && editing.x === cell.x && editing.y === cell.y;\n  };\n\n  return [isEditing, setEditing];\n}\n\n\nSpreadsheet.propTypes = {\n  sheet: PropTypes.object.isRequired,\n};\n\nexport default observer(Spreadsheet);\n","import {observable} from \"mobx\";\n\nexport class SpreadsheetStore {\n  cells = [];\n\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.cells = Array(y);\n    for (let i = 0; i < y; i++) {\n      this.cells[i] = Array(x);\n      for (let j = 0; j < x; j++) {\n        this.cells[i][j] = new Cell(this, i, j);\n      }\n    }\n  }\n\n  /**\n   * @param cellLabel For example: A2, AB13, C13 etc as string\n   */\n  getCellByLabel(cellLabel) {\n    cellLabel = cellLabel.toUpperCase();\n    let index = 0;\n    while (index < cellLabel.length && isUpperLetter(cellLabel[index])) {\n      index++;\n    }\n    const letters = cellLabel.substring(0, index);\n    const digits = cellLabel.substring(index);\n\n    if (letters.length === 0 || digits.length === 0) {\n      throw Error(`Incorrect label: ${cellLabel}`)\n\n    }\n\n    const y_index = parseInt(digits) - 1;\n\n    let x_index = 0;\n    for (let i = 0; i < letters.length; i++) {\n      x_index *= (\"Z\".charCodeAt(0) - 'A'.charCodeAt(0) + 1);\n      x_index += letters[i].charCodeAt(0) - \"A\".charCodeAt(0);\n    }\n\n    if (this.x <= x_index || this.y <= y_index) {\n      throw Error(`No cell: ${cellLabel}`)\n    }\n\n    return this.cells[y_index][x_index];\n  }\n}\n\n\nexport class Cell {\n\n  @observable formula = null;\n  @observable value = null;\n  @observable error = null;\n\n  constructor(sheet, x, y) {\n    this.sheet = sheet;\n    this.x = x;\n    this.y = y;\n  }\n\n  // cells that observe ass -> we are used in their formula\n  observers = [];\n  // cells that we observe for changes -> we use them in our formula\n  // this is needed to remove us from their observer list when we change formula\n  // could avoid this list by parsing old formula for cell one more time\n  // dunno which is better\n  subjects = [];\n\n  set(string) {\n    this.unregisterFromAllSubjects();\n    try {\n      if (isFormula(string)) {\n        // todo parse for every reference here\n        this.formula = string;\n        // noinspection JSUnresolvedFunction\n        const cellsReferenced = [this.sheet.getCellByLabel(this.formula.substring(1))];\n        this.calculateValue();\n        for (const cell of cellsReferenced) {\n          this.observe(cell);\n        }\n      } else {\n        this.value = string;\n        this.formula = null;\n      }\n\n      const x = this.topologicalSort();\n      for (const cell of x) {\n        cell.calculateValue();\n      }\n      this.error = null;\n    } catch (e) {\n      this.error = e.message;\n    }\n\n\n  }\n\n  unregisterFromAllSubjects() {\n    for (const cell of this.subjects) {\n      cell.unregisterObserver(this);\n    }\n    this.subjects = [];\n  }\n\n  observe(cell) {\n    cell.registerObserver(this);\n    this.subjects.push(cell);\n  }\n\n  topologicalSort() {\n    let visited = [];\n    let sorted = [];\n    dfs(this);\n\n    function dfs(cell) {\n      if (sorted.includes(cell)) {\n        return;\n      }\n      if (visited.includes(cell)) {\n        throw Error(\"cycle\");\n      }\n      visited.push(cell);\n      for (const neighbour of cell.observers) {\n        dfs(neighbour)\n      }\n      sorted.push(cell);\n    }\n\n    return sorted.reverse().slice(1);\n  }\n\n  registerObserver(cell) {\n    this.observers.push(cell);\n  }\n\n  unregisterObserver(cell) {\n    const index = this.observers.indexOf(cell);\n    if (index === this.observers.length - 1) {\n      this.observers.pop();\n    } else {\n      this.observers[index] = this.observers.pop();\n    }\n  }\n\n  calculateValue() {\n    // todo add parser here\n    // noinspection JSUnresolvedFunction\n    let cellReferenced = this.sheet.getCellByLabel(this.formula.substring(1));\n    this.value = cellReferenced.value;\n  }\n\n}\n\n// helper functions\n\nfunction isFormula(x) {\n  return x.charAt(0) === '=';\n}\n\nfunction isUpperLetter(x) {\n  return 'A'.charCodeAt(0) <= x.charCodeAt(0) && x.charCodeAt(0) <= 'Z'.charCodeAt(0);\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport Spreadsheet from \"./components/Spreadsheet\";\nimport {SpreadsheetStore} from \"./mobx/SpreadsheetStore\";\n\nconst store = new SpreadsheetStore(5, 10);\n\nfunction App() {\n\n  useEffect(() => {\n\n    store.cells[0][0].set(\"Self reference\");\n    store.cells[0][1].set(\"=B1\");\n\n    store.cells[1][0].set(\"Cycle\");\n    store.cells[1][1].set(\"=C2\");\n    store.cells[1][2].set(\"=B2\");\n\n    store.cells[2][0].set(\"Auto update working\");\n    store.cells[2][2].set(\"=B3\");\n    store.cells[2][3].set(\"=C3\");\n    store.cells[2][1].set(\"coś\");\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Spreadsheet\n        x={store.x}\n        y={store.y}\n        cells={store.cells}\n        onCellSet={(cell,value) => {cell.set(value)}}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spreadsheet\":\"Spreadsheet_Spreadsheet__2MlAU\",\"focus\":\"Spreadsheet_focus__2PRei\",\"error\":\"Spreadsheet_error__2OBGk\"};"],"sourceRoot":""}